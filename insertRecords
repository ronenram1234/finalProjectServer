const axios = require("axios");
const mongoose = require("mongoose");
const fs = require("fs");
const path = require("path");
require("dotenv").config();
const User = require("./models/User");
const Card = require("./models/Card");

const port = process.env.PORT || 5000;
const API_BASE_URL = `http://localhost:${port}`;
const DATA_FILE_PATH = path.join(__dirname, "datainit.json");

// Connect to MongoDB
const connectToMongoDB = async () => {
  try {
    await mongoose.connect(process.env.DB);
    console.log("Connected to MongoDB");
  } catch (err) {
    console.error("MongoDB connection error:", err);
    process.exit(1);
  }
};

// Read JSON Data
const readDataFile = () => {
  try {
    const rawData = fs.readFileSync(DATA_FILE_PATH, "utf8");
    return JSON.parse(rawData);
  } catch (error) {
    console.error("Error reading datainit.json:", error.message);
    process.exit(1);
  }
};

// Delete all users and insert new ones
const insertUsers = async (users) => {
  try {
    console.log("Deleting all users from the database...");

    await User.deleteMany({})
      .then(() => console.log("All users deleted successfully."))
      .catch((error) => console.error("Error deleting users:", error.message));
    let businessUserId = null;

    for (const user of users) {
      try {
        const response = await axios.post(`${API_BASE_URL}/users`, user); // Keep API validation
        console.log(`User ${user.name.first} created successfully.`);
        if (!businessUserId && user.isBusiness) {
          businessUserId = response.data._id; // Get buisness ID 

        }
      } catch (error) {
        console.log(`Error creating user ${user.name.first}:`, error);
      }
    }
    return businessUserId;
  } catch (error) {
    console.error("Error handling users:", error);
  }
};


// Delete all cards and insert new ones
const insertCards = async (cards, businessUserId) => {
  try {
    console.log("Deleting all cards from the database...");

    await Card.deleteMany({})
      .then(() => console.log("All cards deleted successfully."))
      .catch((error) => console.error("Error deleting cards:", error.message));

    for (const card of cards) {
      try {
        card.user_id = businessUserId;
        await axios.post(`${API_BASE_URL}/cards`, card); // Keep API validation
        console.log(`Card ${card.title} created successfully.`);
      } catch (error) {
        console.error(
          `Error creating card ${card.title}:`,
          error.response?.data || error.message
        );
      }
    }
  } catch (error) {
    console.error("Error handling cards:", error);
  }
};

// Main Execution Function
(async () => {
  await connectToMongoDB(); // Ensure MongoDB connection is established
  const { users, cards } = readDataFile(); // Read JSON data
  const businessUserId = await insertUsers(users);
  console.log("businessUserId - ", businessUserId)
  await insertCards(cards, businessUserId);
  mongoose.connection.close();
})();
